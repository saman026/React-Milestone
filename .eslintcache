[{"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\index.js":"1","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\serviceWorker.js":"2","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\App.js":"3","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\utils\\theme.js":"4","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\utils\\constants.js":"5","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\views\\CollectorDashboard.js":"6","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\utils\\formatter.js":"7","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\Footer.js":"8","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\controls\\Controls.js":"9","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\controls\\Input.js":"10","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\controls\\Button.js":"11","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\controls\\ActionButton.js":"12","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\Notification.js":"13","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\PopUp.js":"14","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\reducers\\Reducer.js":"15","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\views\\ReceivablesDashboard.js":"16","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\utils\\store.js":"17","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\Labels.js":"18","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\actions\\Action.js":"19","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\reducers\\reducer.js":"20","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\actions\\action.js":"21","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\services\\services.js":"22","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\controls\\ProgressBar.js":"23","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\EditModal.js":"24","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\DeleteModal.js":"25","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\AddModal.js":"26","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\GridHeader.js":"27","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\Header.js":"28","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\Table.js":"29","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\TableHeader.js":"30","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\TableToolbar.js":"31","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\NoResult.js":"32","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\ViewCorrespondanceModal.js":"33"},{"size":824,"mtime":1616144481480,"results":"34","hashOfConfig":"35"},{"size":5226,"mtime":1589284044061,"results":"36","hashOfConfig":"35"},{"size":1354,"mtime":1616388576787,"results":"37","hashOfConfig":"35"},{"size":606,"mtime":1615287159522,"results":"38","hashOfConfig":"35"},{"size":174,"mtime":1616377313033,"results":"39","hashOfConfig":"35"},{"size":6475,"mtime":1616143984950,"results":"40","hashOfConfig":"35"},{"size":2195,"mtime":1616346609840,"results":"41","hashOfConfig":"35"},{"size":1163,"mtime":1616144022444,"results":"42","hashOfConfig":"35"},{"size":310,"mtime":1616377072642,"results":"43","hashOfConfig":"35"},{"size":1353,"mtime":1616342922352,"results":"44","hashOfConfig":"35"},{"size":1407,"mtime":1616342792769,"results":"45","hashOfConfig":"35"},{"size":934,"mtime":1616342562601,"results":"46","hashOfConfig":"35"},{"size":1610,"mtime":1616372695649,"results":"47","hashOfConfig":"35"},{"size":10386,"mtime":1618290636004,"results":"48","hashOfConfig":"35"},{"size":4095,"mtime":1615623917949,"results":"49","hashOfConfig":"35"},{"size":1468,"mtime":1616374853990,"results":"50","hashOfConfig":"35"},{"size":245,"mtime":1616381543075,"results":"51","hashOfConfig":"35"},{"size":810,"mtime":1616346048345,"results":"52","hashOfConfig":"35"},{"size":2703,"mtime":1615625077944,"results":"53","hashOfConfig":"35"},{"size":3486,"mtime":1616734856755,"results":"54","hashOfConfig":"35"},{"size":2139,"mtime":1616734991464,"results":"55","hashOfConfig":"35"},{"size":2738,"mtime":1616613425276,"results":"56","hashOfConfig":"35"},{"size":1847,"mtime":1616377052410,"results":"57","hashOfConfig":"35"},{"size":3473,"mtime":1616738069571,"results":"58","hashOfConfig":"35"},{"size":617,"mtime":1616374099898,"results":"59","hashOfConfig":"35"},{"size":6668,"mtime":1616488035363,"results":"60","hashOfConfig":"35"},{"size":710,"mtime":1616373338622,"results":"61","hashOfConfig":"35"},{"size":1797,"mtime":1616373200091,"results":"62","hashOfConfig":"35"},{"size":11604,"mtime":1616748237721,"results":"63","hashOfConfig":"35"},{"size":2444,"mtime":1616374191847,"results":"64","hashOfConfig":"35"},{"size":8116,"mtime":1616667189870,"results":"65","hashOfConfig":"35"},{"size":1093,"mtime":1616372810021,"results":"66","hashOfConfig":"35"},{"size":11482,"mtime":1616372541673,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"zooa14",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"70"},"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\index.js",[],["138","139"],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\serviceWorker.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\App.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\utils\\theme.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\utils\\constants.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\views\\CollectorDashboard.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\utils\\formatter.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\Footer.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\controls\\Controls.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\controls\\Input.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\controls\\Button.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\controls\\ActionButton.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\Notification.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\PopUp.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\reducers\\Reducer.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\views\\ReceivablesDashboard.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\utils\\store.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\Labels.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\actions\\Action.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\reducers\\reducer.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\actions\\action.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\services\\services.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\controls\\ProgressBar.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\EditModal.js",["140"],"import React, {useState} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { Typography, withStyles } from '@material-ui/core';\r\nimport Input from './controls/Input';\r\nimport Labels from './Labels';\r\nimport Controls from './controls/Controls';\r\nimport { pxToRem } from '../utils/theme';\r\nimport { connect } from 'react-redux';\r\nimport { editDetails, } from '../actions/action';\r\nimport { getData } from '../services/services';\r\n\r\n// Styling Input\r\nconst CustomInput = withStyles({\r\n    root: {\r\n        '& .MuiOutlinedInput-root': {\r\n            height: pxToRem(45),\r\n            backgroundColor: '#283A46 ',\r\n            paddingLeft: pxToRem(20)\r\n        },\r\n        '& .MuiOutlinedInput-input': {\r\n            paddingLeft: 0 \r\n        },\r\n    }\r\n})(Input)\r\n\r\n// Other stylings\r\nconst useStyles = makeStyles({\r\n    align: {\r\n        alignSelf: 'center'\r\n    },\r\n    margin: {\r\n        marginBottom: pxToRem(28)\r\n    },   \r\n})\r\n\r\n\r\n\r\nfunction EditModal(props) {\r\n    \r\n    //  Destructuring the props\r\n    const { editDetails, edit } = props;\r\n\r\n    \r\n    // Initializing the state\r\n    const [formData, setFormData] = useState({       \r\n        total_open_amount: edit.total_open_amount,     \r\n        notes: edit.notes,       \r\n    });\r\n    \r\n    //  Destructuring formData\r\n    const { total_open_amount, notes } = formData;\r\n    \r\n    // Handling onChange event\r\n    const onChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n    const classes = useStyles();\r\n\r\n    // Dispatching the formData values to store using editdetails function\r\n    editDetails(formData);\r\n\r\n    return (\r\n        <Grid >\r\n            <Grid item xs={12}>\r\n                \r\n                <Grid item xs={12} container>       \r\n                    <Grid item xs={5} className={classes.align}>                    \r\n                        <Labels text=\"Invoice Amount\" />                  \r\n                    </Grid>\r\n                                   \r\n                    <Grid item xs={6} align=\"left\">                    \r\n                        <CustomInput name=\"total_open_amount\" value={total_open_amount} type=\"number\" onChange={(e) => onChange(e)} />\r\n                    </Grid>                         \r\n                </Grid>\r\n\r\n                <Grid item xs={12} container style={{ marginTop: pxToRem(28) }} >\r\n                    <Grid item xs={5} >           \r\n                        <Typography className={classes.root} >\r\n                            Notes{\"  \"}\r\n                        </Typography>\r\n                    </Grid>\r\n                    \r\n        \r\n                    <Grid item xs={6} align=\"left\" >\r\n                        <Controls.Input name=\"notes\" value={notes} onChange={(e) => onChange(e)} multiline style={{ backgroundColor: '#283A46 ', }} />       \r\n                    </Grid>                  \r\n        \r\n                </Grid>              \r\n            </Grid>             \r\n        </Grid>\r\n    )\r\n}\r\n\r\n// Extracting data from the store\r\nconst mapStateToProps = state => ({\r\n    edit: state.details,\r\n    selected: state.selected,\r\n})\r\n\r\n// Dispatching actions to the store\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    editDetails: (user) => {\r\n      dispatch(editDetails(user));\r\n    },\r\n   \r\n});\r\n  \r\n// Connecting to the store\r\n// Exporting the component\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditModal);\r\n\r\n","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\DeleteModal.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\AddModal.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\GridHeader.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\Header.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\Table.js",["141","142","143","144"],"import React from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CustomTableHeader from './TableHeader';\r\nimport { pxToRem, pxToVh } from '../utils/theme';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ProgressBar from './controls/ProgressBar';\r\nimport { formatter } from \"../utils/formatter\";\r\nimport { addSelected, setInvoices } from '../actions/action';\r\nimport NoResult from './NoResult';\r\nimport { SERVER_URL } from '../utils/constants';\r\nimport Moment from 'react-moment';\r\n\r\n// Styling TableCell\r\nconst CustomTableCell = withStyles(theme => ({\r\n  root: {  \r\n    padding: 0,\r\n    borderBottom: 'none',    \r\n  },\r\n  \r\n  body: {\r\n    fontSize: pxToRem(20),\r\n    fontFamily: 'Ubuntu, sans-serif',\r\n    lineHeight: pxToRem(24),    \r\n    letterSpacing: '0px',    \r\n    color: '#FFFFFF',    \r\n    opacity: 1,\r\n  },\r\n  \r\n}))(TableCell);\r\n\r\n// Styling TableRow\r\nconst StyledTableRow = withStyles((theme) => ({\r\n\r\n  selected: {\r\n    backgroundColor: \"#2A5368 !important\",\r\n  },\r\n  root: {      \r\n    '&:nth-of-type(even)': {     \r\n      backgroundColor: '#283A46',  \r\n    },\r\n  },\r\n\r\n}))(TableRow);\r\n  \r\n// Other Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {       \r\n    '& .MuiCheckbox-colorSecondary': {         \r\n      color: '#97A1A9'      \r\n    },\r\n    '& .MuiCheckbox-colorSecondary.Mui-checked': {          \r\n      color: '#14AFF1'\r\n    },     \r\n    borderRadius: '10px',        \r\n    backgroundColor: '#273D49CC',       \r\n    opacity: 1,        \r\n    width: '97%',        \r\n    margin: 'auto',   \r\n    marginTop: pxToRem(30),       \r\n    height: '80vh',\r\n  },\r\n  \r\n  paper: {\r\n    width: '100%',   \r\n    marginBottom: theme.spacing(2),       \r\n    backgroundColor: 'transparent',       \r\n    marginLeft: 'auto',      \r\n    elevation: 0 \r\n  },\r\n\r\n}));\r\n  \r\n\r\nconst CustomTableBody = withStyles({\r\n  width: '100vw'\r\n})(TableBody)\r\n  \r\n\r\n\r\nfunction EnhancedTable(props) {\r\n\r\n  console.log([props, \"props\"]);\r\n  let [invoice, setInvoice] = React.useState([]);\r\n  let [isNext, isNextFunc] = React.useState(false);\r\n  let [pageCount, setCount] = React.useState(1);\r\n  let search = [];\r\n\r\n  // let [searchInvoice, setSearch] = React.useState([]);\r\n  // Function to call fetch data API\r\n  const fetchData = React.useCallback(async () => {\r\n    try {\r\n\r\n      // Data fetching using axios\r\n      axios.get(\r\n        `${SERVER_URL}FetchData?operation=fetchAll&pageCount=${pageCount}&limit=15`\r\n      )\r\n        .then((response) => {\r\n          props.setInvoices([...invoice, ...response.data])\r\n          setInvoice([...invoice, ...response.data]);\r\n          isNextFunc(true);          \r\n        })    \r\n        .catch((error) => {       \r\n          console.log(error);         \r\n        })     \r\n    } catch (error) {     \r\n      console.log(error);      \r\n    }; \r\n  });\r\n\r\n  function fetchMoreData() {\r\n    setCount(pageCount + 1);\r\n  }\r\n  \r\n  const [notify, setNotify] = React.useState({ isOpen: false, message: '', type: '' })\r\n  \r\n  // Conditional Rendering\r\n  React.useEffect(() => {\r\n    // if search data is present, calling the search API\r\n    if (props.searchData) {\r\n      // let invoice = [];\r\n      try {\r\n        axios.get(\r\n          `${SERVER_URL}FetchData?operation=searchData&invoice_no=${props.searchData}&pageCount=${pageCount}&limit=15`\r\n        ).then((res) => {\r\n\r\n          // Setting the result of the API call searchData variable\r\n          props.setInvoices([...search, ...res.data]);\r\n          setInvoice([...search, ...res.data])\r\n          setSearchData(...res.data);\r\n        }).catch(err => {                // Error Handling\r\n          setNotify({\r\n            isOpen: true,\r\n            message: 'Error in searching!',\r\n            type: 'error'\r\n          })\r\n        })\r\n      }\r\n      catch (error){\r\n        console.log(error);\r\n      }\r\n    }\r\n    else fetchData();\r\n    \r\n  }, [pageCount, props.searchData])\r\n\r\n\r\n  let [searchData, setSearchData] = React.useState([]);\r\n  const classes = useStyles();   \r\n  const [selected, setSelected] = React.useState([]);\r\n\r\n  // Function to handle the table head checkbox click event\r\n  const handleSelectAllClick = (event) => {      \r\n    if (event.target.checked) {       \r\n      const newSelecteds = invoice.map((row) => row.doc_id);     \r\n      setSelected(newSelecteds);      \r\n      return;  \r\n    }   \r\n    setSelected([]);   \r\n  };\r\n  \r\n  let newSelected = [];\r\n  \r\n  const [edit, setEdit] = React.useState([]);\r\n\r\n  // Handling click for each row checkbox in table\r\n  const handleClick = (event, name, notes, total_open_amount) => {\r\n    \r\n    const selectedIndex = selected.indexOf(name);    \r\n  \r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n       setEdit({\r\n          doc_id: name,\r\n          notes: notes,\r\n          total_open_amount: total_open_amount\r\n       })\r\n      \r\n    } else if (selectedIndex === 0) {      \r\n      newSelected = newSelected.concat(selected.slice(1));\r\n\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n\r\n    } else if (selectedIndex > 0) {      \r\n      newSelected = newSelected.concat(          \r\n        selected.slice(0, selectedIndex),       \r\n        selected.slice(selectedIndex + 1),          \r\n      );\r\n    }\r\n    setSelected(newSelected);     \r\n  };\r\n  \r\n  // passing selected rows doc_id to the store\r\n  props.addSelected(selected, edit);\r\n\r\n  // Checking for selected\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n     \r\n  return ( \r\n    <>     \r\n      <TableContainer >       \r\n        <Table stickyHeader aria-label=\"sticky table\" style={{ opacity: 1, zIndex: 1, }}\r\n          className={classes.table}          \r\n          aria-labelledby=\"tableTitle\"         \r\n        >        \r\n          <InfiniteScroll            \r\n            dataLength={invoice ? invoice.length : search.length}          \r\n            next={fetchMoreData}           \r\n            hasMore={isNext}           \r\n            loader={                 \r\n              <div               \r\n                style={{ marginBottom: pxToRem(89) }}               \r\n              >               \r\n                <ProgressBar />               \r\n              </div>              \r\n            }          \r\n            height={pxToVh(510)}            \r\n          >           \r\n            <CustomTableHeader style={{ zIndex: 20 }}            \r\n              label1=\"Customer Name\"             \r\n              label2=\"Customer #\"             \r\n              label3=\"Invoice #\"             \r\n              label4=\"Invoice Amount\"             \r\n              label5=\"Due date\"             \r\n              label6=\"Delay\"             \r\n              label7=\"Predicted Aging Bucket\"             \r\n              label8=\"Notes\"             \r\n              classes={classes}             \r\n              numSelected={selected.length}             \r\n              onSelectAllClick={handleSelectAllClick}           \r\n              rowCount={invoice.length}              \r\n            />\r\n            \r\n            <CustomTableBody >\r\n\r\n              {/* Conditional data display to the table */}\r\n              {/* {props.invoices.length !== 0 ? (               */}\r\n              {props.invoices && props.invoices\r\n                .map((row, index) => {\r\n                 \r\n                  const isItemSelected = isSelected(row.doc_id);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  \r\n                  return (<>\r\n                    {props.prediction && props.prediction.map((predicted, indx) => {\r\n                     \r\n                      <>\r\n                        {predicted.doc_id === row.doc_id && (row.prediction = predicted.prediction)}\r\n                        {predicted.doc_id === row.doc_id && (row.bucket = \"> 60\")}\r\n                      </>\r\n                     \r\n                    })}\r\n                    <StyledTableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row.doc_id, row.notes, row.total_open_amount)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.doc_id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                        \r\n                      <CustomTableCell padding=\"checkbox\" style={{ paddingLeft: '1rem' }}>\r\n                          \r\n                        <Checkbox\r\n                          classes={{\r\n                            checked: classes.checked\r\n                          }}\r\n                          checked={isItemSelected}\r\n                          inputProps={{ 'aria-labelledby': labelId }}\r\n                        />\r\n                      </CustomTableCell>\r\n                        \r\n                      <CustomTableCell component=\"th\" align=\"left\" id={labelId} scope=\"row\" padding=\"none\">\r\n                        {row.name_customer}\r\n                      </CustomTableCell>\r\n                      <CustomTableCell align=\"left\">{row.cust_number}</CustomTableCell>\r\n                      <CustomTableCell align=\"left\">{row.invoice_id}</CustomTableCell>\r\n                      <CustomTableCell align=\"center\">{formatter(row.total_open_amount)}</CustomTableCell>\r\n                      <CustomTableCell align=\"left\">\r\n                        <Moment format=\"DD-MMM-YYYY\">{row.due_in_date}</Moment>\r\n                      </CustomTableCell>\r\n                      <CustomTableCell align=\"right\" style={{ paddingRight: '2rem' }}>\r\n                        {row.prediction ? row.prediction : \"--\"}\r\n                      </CustomTableCell>\r\n                      <CustomTableCell align=\"left\" style={{ paddingLeft: '2rem' }}>{row.bucket ? row.bucket : \"--\"}</CustomTableCell>\r\n                      <CustomTableCell align=\"left\">\r\n                        <div style={{ textOverflow: 'ellipsis', width: '5rem' }}>\r\n                          <Typography noWrap={true}>{row.notes}</Typography>\r\n                        </div>\r\n                      </CustomTableCell>\r\n                    </StyledTableRow>\r\n                  </>\r\n                  );\r\n                })}\r\n                {!searchData &&<NoResult />}\r\n                \r\n                  \r\n              \r\n\r\n            </CustomTableBody>          \r\n          </InfiniteScroll>         \r\n        </Table>      \r\n      </TableContainer>   \r\n    </>\r\n  );  \r\n}\r\n  \r\n  \r\n// Extracting state from store\r\nconst mapStateToProps = (state) => ({\r\n  invoices: state.invoices,\r\n  k: console.log(state, \"srat\"),\r\n  searchData: state.searchData,\r\n  prediction: state.prediction\r\n})\r\n    \r\n// Dispatching actions to the store\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setInvoices: (invoice) => {\r\n    dispatch(setInvoices(invoice));    \r\n  },\r\n  \r\n  addSelected: (selected, edit) => {\r\n    dispatch(addSelected(selected, selected.length, edit));\r\n  }\r\n  \r\n})\r\n    \r\n// Connecting to the store\r\n// Exporting the component\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EnhancedTable);","C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\TableHeader.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\TableToolbar.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\NoResult.js",[],"C:\\Users\\KIIT\\Desktop\\HRC workspace\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\ViewCorrespondanceModal.js",["145"],"import { Dialog, DialogActions, DialogContent, DialogTitle, FormControl, InputBase, makeStyles, NativeSelect, TableBody, TableCell, TableRow, Typography, withStyles } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { pxToRem, pxToVw } from '../utils/theme'\r\nimport Controls from './controls/Controls'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport CustomTableHeader from './TableHeader'\r\nimport { formatter } from '../utils/formatter';\r\nimport jsPDF from 'jspdf';\r\nimport { autoTable } from 'jspdf-autotable'\r\n\r\n// Styling\r\nconst useStyles = makeStyles(theme => ({\r\n    dialogWrapper: {\r\n        fontFamily: 'Ubuntu, sans-serif',\r\n        fontSize: pxToRem(20),\r\n        backgroundColor: '#2A3E4C',\r\n        color: '#C0C6CA',\r\n    },\r\n    leftAlignDialogActions: {\r\n        paddingLeft: pxToRem(50),\r\n    },\r\n    margin: {\r\n        marginLeft: pxToRem(20),\r\n        marginRight: pxToRem(45)\r\n    } \r\n}))\r\n\r\nconst BootstrapInput = withStyles((theme) => ({\r\n    root: {\r\n        'label + &': { \r\n            marginTop: theme.spacing(3),  \r\n        },\r\n    },\r\n    input: {\r\n        width: pxToRem(140),\r\n        border: '1px solid #14AFF1',\r\n        borderRadius: '10px',\r\n        opacity: '1',\r\n        backgroundColor: '#283A46',\r\n        paddingLeft: '1rem',\r\n        paddingRight: '2rem',\r\n        color: 'white',\r\n\r\n        '&:focus': {\r\n            borderRadius: 10,\r\n        },\r\n    },\r\n}))(InputBase);\r\n  \r\n\r\nconst CustomArrow = withStyles({\r\n    root: {\r\n        color: '#97A1A9',\r\n        paddingRight: '0.5rem'\r\n    }\r\n})(KeyboardArrowDownIcon)\r\n\r\n\r\n// Styling TableCell\r\nconst CustomTableCell = withStyles(theme => ({     \r\n    root: {\r\n        borderBottom: 'none',\r\n        paddingTop: '0.4rem'\r\n    },\r\n    body: {\r\n        fontSize: pxToRem(20),       \r\n        fontFamily: 'Ubuntu, sans-serif',   \r\n        lineHeight: pxToRem(24),     \r\n        letterSpacing: '0px',     \r\n        color: '#FFFFFF',     \r\n        opacity: 1,     \r\n        paddingLeft: '3vw'      \r\n    },\r\n\r\n}))(TableCell);\r\n\r\n\r\n// Styling TableRow\r\nconst StyledTableRow = withStyles((theme) => ({    \r\n    root: {\r\n        '&:nth-of-type(even)': {\r\n            backgroundColor: '#283A46',\r\n        },\r\n    },\r\n}))(TableRow);\r\n  \r\nfunction ViewCorrespondanceModal(props) {\r\n\r\n    // Defining initial state\r\n    const [type, setType] = useState('1');\r\n\r\n    // Handling state change\r\n    const handleChange = (event) => {\r\n      setType(event.target.value);\r\n    };\r\n\r\n    let totalAmount = 0;\r\n\r\n    const classes = useStyles();   \r\n\r\n    // Handling the Download button clicked event\r\n    const handleClick = () => {\r\n        let rows = [];\r\n        props.invoice.forEach((row, index) => {\r\n            let temp = [\r\n                row.invoice_id,\r\n                row.doc_id,\r\n                row.posting_date,\r\n                row.due_in_date,\r\n                row.invoice_currency,\r\n                row.total_open_amount\r\n            ];\r\n            rows.push(temp);\r\n        });\r\n        \r\n        let cols = [\r\n            \"Invoice number\",\r\n            \"PO Number\",\r\n            \"Invoice Date\",\r\n            \"Due Date\",\r\n            \"Invoice Currency\",\r\n            \"Invoice Amount\",\r\n        ];\r\n\r\n        // Initializing jsPDF\r\n        const doc = new jsPDF();\r\n        \r\n        // Content of the pdf\r\n        doc.autoTable(cols, rows, { startY: 10 })\r\n        \r\n        // Downloading the pdf\r\n        doc.save(\"Correspondance.pdf\");\r\n    }\r\n\r\n    return (           \r\n        <>\r\n            <Dialog open={props.openPopup} maxWidth=\"lg\" classes={{ paper: classes.dialogWrapper }} >       \r\n                <DialogTitle>\r\n                    <div style={{ display: 'flex' }}>\r\n                        <Typography variant=\"h6\" component=\"div\" style={{ flexGrow: 1, color: 'white' }}>\r\n                            <span style={{ fontSize: pxToRem(28), lineHeight: pxToRem(32), fontFamily: 'Ubuntu, sans-serif' }}>View Correspondance{\" \"}({props.number})</span>\r\n                        </Typography>\r\n                       \r\n                        <Typography style={{ alignItems: 'center' }}>View:</Typography>\r\n                        <FormControl className={classes.margin}>                                 \r\n                            <NativeSelect                               \r\n                                IconComponent={CustomArrow}                               \r\n                                value={type}                               \r\n                                onChange={handleChange}                               \r\n                                input={<BootstrapInput />}                               \r\n                            >                               \r\n                                <option value={1}>Template 1</option>                                \r\n                                <option value={2}>Template 2</option>\r\n                                \r\n                            </NativeSelect>                            \r\n                        </FormControl>\r\n                        \r\n                        <Controls.ActionButton\r\n                            background=\"none\"\r\n                            onClick={()=>{props.setOpenPopup(false)}}>\r\n                            <CloseIcon />\r\n                        </Controls.ActionButton>\r\n                        \r\n                    </div>\r\n                </DialogTitle>\r\n                <DialogContent dividers id=\"divToPrint\" style={{ backgroundColor: '#2A3E4C' }} >                   \r\n                    <p>Subject: <span style={{ color: '#FFFFFF' }}>Invoice Details - Account Name</span></p>                   \r\n                    <div>Dear Sir/Madam,</div>\r\n                    \r\n                    {/* Redering on the basis of template type 1 or 2 */}\r\n                    {type === '1' && (\r\n                        <>\r\n                            <div>Greetings</div>\r\n                            <p>This is to remind you that there are one or more open invoices on your account. Please provide at your earliest convenience an update on the payment details or clarify the reason for the delay. If you have any specific issue with the invoice(s), please let us know so that we can address it to the correct Department.</p>\r\n                        </>\r\n                    )}\r\n                    {type === '2' && (   \r\n                        <p>Gentle reminder that you have one or more open invoices on your account. Please get back to us with an expected date of payment. If you have any specific issue with the invoice(s), please let us know so that we can address it at the earliest.</p>                                             \r\n                    )}\r\n                    <p>Please find the details of the invoices below:</p>\r\n                    \r\n                    <div style={{ paddingLeft: '2rem' }}>\r\n                        <CustomTableHeader\r\n                            label1=\"Invoice number\"\r\n                            label2=\"PO Number\"\r\n                            label3=\"Invoice Date\"\r\n                            label4=\"Due Date\"\r\n                            label5=\"Currency\"\r\n                            label6=\"Open Amount($)\"\r\n                        />\r\n                    </div>\r\n                    \r\n                    <TableBody>                \r\n                        {props.invoice && props.invoice    \r\n                            .map((row, index) => {                        \r\n                                totalAmount += row.total_open_amount\r\n                                \r\n                                return (                         \r\n                                    <StyledTableRow                                        \r\n                                        hover                                       \r\n                                    >                                   \r\n                                        <CustomTableCell component=\"th\" align=\"center\" scope=\"row\" padding=\"none\">                                          \r\n                                            {row.invoice_id}\r\n                                        </CustomTableCell>                                        \r\n                                        <CustomTableCell style={{ paddingLeft: '5vw' }} align=\"center\" >{row.doc_id}</CustomTableCell>                                       \r\n                                        <CustomTableCell style={{ paddingLeft: '5vw' }} align=\"center\">{row.posting_date}</CustomTableCell>                \r\n                                        <CustomTableCell style={{ marginLeft: '4vw' }} align=\"center\">{row.due_in_date}</CustomTableCell>                     \r\n                                        <CustomTableCell style={{ paddingLeft: '5vw' }} align=\"center\">{row.invoice_currency}</CustomTableCell>         \r\n                                        <CustomTableCell style={{ paddingLeft: '13vw' }} align=\"right\">{formatter(row.total_open_amount)}</CustomTableCell>                                     \r\n                                    </StyledTableRow>                                 \r\n                                );\r\n                            })                           \r\n                        }                       \r\n                    </TableBody>\r\n                    \r\n                    {type === '1' && (                       \r\n                        <p><br></br>Total Amount to be paid: $ <span style={{ color: '#FFFFFF' }}>{formatter(totalAmount)}</span> </p>                       \r\n                    )}\r\n                    \r\n                    <p> <br></br>In case you have already made a payment for the above items, please send us the details to ensure the payment is posted. <br></br>Let us know if we can be of any further assistance.                      \r\n                        Looking forward to hearing from you.</p><br></br>                  \r\n                    <div>Kind Regards,</div>                   \r\n                            \r\n                    <div style={{ color: '#FFFFFF' }}>[Sender’s First Name][Sender’s Last Name]</div>                   \r\n                    <div>Phone : <span style={{ color: '#FFFFFF' }}>[Sender’s contact number]</span></div>\r\n                    <div>Fax : <span style={{ color: '#FFFFFF' }}>[If any]</span></div>\r\n                    <div>Email :<span style={{ color: '#FFFFFF' }}>[Sender’s Email Address]</span></div>\r\n                    <div style={{ color: '#FFFFFF' }}>Company Name[Sender’s Company Name]</div>\r\n\r\n                </DialogContent>\r\n                <DialogActions >\r\n              \r\n                    <Controls.Button text=\"Cancel\" variant=\"text\" style={{ color: '#14AFF1', paddingRight: pxToRem(25) }} onClick={() => { props.setOpenPopup(false) }} />                   \r\n                    <Controls.Button text=\"Download\" variant=\"contained\" style={{ marginRight: pxToVw(25) }} onClick={handleClick} />\r\n                    \r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    ) \r\n}\r\n\r\n// Extracting data from the store\r\nconst mapSateToProps = state => ({\r\n    number: state.number,\r\n    selected: state.selected,\r\n        \r\n})\r\n\r\n// Connecting to the store\r\n// Exporting the component\r\nexport default connect(mapSateToProps)(ViewCorrespondanceModal)",{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":11,"column":10,"nodeType":"152","messageId":"153","endLine":11,"endColumn":17},{"ruleId":"154","severity":1,"message":"155","line":99,"column":21,"nodeType":"156","endLine":99,"endColumn":38},{"ruleId":"150","severity":1,"message":"157","line":123,"column":10,"nodeType":"152","messageId":"153","endLine":123,"endColumn":16},{"ruleId":"154","severity":1,"message":"158","line":153,"column":6,"nodeType":"159","endLine":153,"endColumn":35,"suggestions":"160"},{"ruleId":"161","severity":1,"message":"162","line":254,"column":81,"nodeType":"163","messageId":"164","endLine":254,"endColumn":83},{"ruleId":"150","severity":1,"message":"165","line":11,"column":10,"nodeType":"152","messageId":"153","endLine":11,"endColumn":19},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"no-unused-vars","'getData' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","MemberExpression","'notify' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'fetchData', 'props', and 'search'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.","ArrayExpression",["168"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'autoTable' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},"Update the dependencies array to be: [fetchData, pageCount, props, props.searchData, search]",{"range":"171","text":"172"},[4340,4369],"[fetchData, pageCount, props, props.searchData, search]"]